# ------------------------------------------------------------------------------

map <c-a> _archive

cmd _archive ${{
    set -f
    command -v atool >/dev/null || { echo "atool command not found."; exit 1; }
    tabs 2
    fn=$(basename "$f")
    declare -gA ARCH
    DEFAULT=x
    if [ -d "$fn" ]; then
        ARCH=(
            [b]='tar+bzip2 tar.bz2'
            [g]='tar+gzip tar.gz'
            [t]='tar tar'
            [x]='tar+xz tar.xz'
            [z]='zip zip'
        )
    elif [ -f "$fn" ]; then
        ARCH=(
            [b]='bzip2 bz2'
            [g]='gzip gz'
            [t]='tar tar'
            [x]='xz xz'
            [z]='zip zip'
        )
    else
        echo 'Error: Bad file type'
        exit 1
    fi
    printf "Archiving '%s' to:\n" "$fn"
    for k in ${!ARCH[@]}; do
        [ "$k" = "$DEFAULT" ] && default='(default)' || default=''
        IFS=' '
        v=(${ARCH[$k]})
        printf "\t[%s] %-10s: %s.%s %s\n" $k ${v[0]} "$fn" ${v[1]} $default
    done
    printf "\n"
    read -n1 -p 'Continue? [b/g/x/z/y/N]: ' ans
    [ -z "$ans" -o "$ans" = "n" ] && exit 0
    printf "\n"
    [ "$ans" = "y" ] && ans=$DEFAULT
    a=(${ARCH[$ans]})
    apack "$fn".${a[1]} "$fn"
    printf "\n"
    read -n1 -p 'Delete sources? [y/N]: ' ans
    [ "$ans" = "y" ] && printf "\nProcessing... " && rm -rf $f && printf "Done\n"
    printf "\n"
}}

